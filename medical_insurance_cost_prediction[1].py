# -*- coding: utf-8 -*-
"""Medical_Insurance_Cost_Prediction[1].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RIFce_suz_YDST50WUyMdbUjfA8ztJcB

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics



"""Data Collection & Analysis"""

# loading the data from csv file to a Pandas DataFrame
insurance_dataset = pd.read_csv("C:\Users\mohdf\OneDrive\Documents\Medical\insurance.csv")

# first 5 rows of the dataframe
insurance_dataset.head()

# number of rows and columns
insurance_dataset.shape

# getting some informations about the dataset
insurance_dataset.info()

"""Categorical Features:
- Sex
- Smoker
- Region
"""

# checking for missing values
insurance_dataset.isnull().sum()

"""Data Analysis"""

# statistical Measures of the dataset
insurance_dataset.describe()

# distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

# Gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex', data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

# bmi distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

"""Normal BMI Range --> 18.5 to 24.9"""

# children column
plt.figure(figsize=(6,6))
sns.countplot(x='children', data=insurance_dataset)
plt.title('Children')
plt.show()

insurance_dataset['children'].value_counts()

# smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=insurance_dataset)
plt.title('smoker')
plt.show()

insurance_dataset['smoker'].value_counts()

# region column
plt.figure(figsize=(6,6))
sns.countplot(x='region', data=insurance_dataset)
plt.title('region')
plt.show()

insurance_dataset['region'].value_counts()

# distribution of charges value
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges Distribution')
plt.show()

"""Data Pre-Processing

Encoding the categorical features
"""

# Encoding 'sex' column
insurance_dataset = insurance_dataset.replace({'sex': {'male': 0, 'female': 1}})
# Encoding 'smoker' column
insurance_dataset = insurance_dataset.replace({'smoker': {'yes': 0, 'no': 1}})
# Encoding 'region' column
insurance_dataset = insurance_dataset.replace({'region': {'southeast': 0, 'southwest': 1, 'northeast': 2, 'northwest': 3}})

"""Splitting the Features and Target"""

X = insurance_dataset.drop(columns='charges', axis=1)
Y = insurance_dataset['charges']

print(X)

print(Y)

"""Splitting the data into Training data & Testing Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Linear Regression
"""

# loading the Linear Regression model
regressor = LinearRegression()

regressor.fit(X_train, Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction =regressor.predict(X_train)

# R squared value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared vale : ', r2_train)

# prediction on test data
test_data_prediction =regressor.predict(X_test)

# R squared value
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared vale : ', r2_test)

"""Building a Predictive System"""

input_data = (40, 1, 26.74, 0, 1, 0)

# Convert the input data to a pandas DataFrame with the same feature names as the training data
feature_names = ['age', 'sex', 'bmi', 'children', 'smoker', 'region']
input_data_as_dataframe = pd.DataFrame([input_data], columns=feature_names)

# Make the prediction
prediction = regressor.predict(input_data_as_dataframe)

# Print the result
print('The insurance cost is USD', prediction[0])

import pickle

with open('model.pkl','wb') as file:
  pickle.dump(regressor,file)

# Assuming 'regressor' is your trained model
file_path = r"C:\Users\mohdf\Downloads\model.pkl"

with open(file_path, 'wb') as file:
    pickle.dump(regressor, file)

print("Model saved successfully!")

with open(file_path, 'rb') as file:
    model = pickle.load(file)
print("Model loaded successfully!")

import numpy as np

# Example input (ensure it matches the feature count used in training)
sample_input = np.array([40, 1, 26.74, 0, 1, 0]).reshape(1, -1)  # Convert to 2D array

# Make prediction
prediction = model.predict(sample_input)

print("Prediction:", prediction)

pickle.dump(regressor, open('model.pkl','wb'))